<Controls:MetroWindow x:Class="SGPTmvvm.Modales.CRUDusuariosView"
                         xmlns:ViewModels="clr-namespace:SGPTmvvm.Modales"
                         xmlns:local="clr-namespace:SGPTmvvm.CustomValidationAttributes"
                         mc:Ignorable="d" 
                         SizeToContent="WidthAndHeight"
                         d:DesignHeight="520" d:DesignWidth="930"
                    
                         x:Name="root" 
                         ShowInTaskbar="True"
                         ResizeMode="CanMinimize"
                         Icon="/SGPtWpf/Recursos/Imagenes/Iconos/CCSV2.png"
                         WindowStartupLocation="CenterScreen" WindowStyle="SingleBorderWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:cmd="http://www.galasoft.ch/mvvmlight"
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                      xmlns:behaviours="clr-namespace:MahApps.Metro.Behaviours;assembly=MahApps.Metro"
                      xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls" 
                      
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:Dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
                      Dialog:DialogParticipation.Register="{Binding}"
                      xmlns:helpers="clr-namespace:SGPTWpf.Helpers"
                      helpers:DialogCloser.DialogResult="{Binding CloseWindowFlag}"                      
                      ShowTitleBar="True" 
                      IsMaxRestoreButtonEnabled="False"
                      IsCloseButtonEnabled="True"
                      IsMinButtonEnabled="True"
                      ShowMinButton="True"
                      ShowMaxRestoreButton="False"
                      SaveWindowPosition="False"
                      WindowTransitionsEnabled="True"
                      EnableDWMDropShadow="True"    >
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding cmdCancelar_Click}" CommandParameter="{Binding}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Control.Resources>
        <!--Este Style RadioButtonList es para que puedan haber radiobottons bindiados-->
        <Style x:Key="RadioButtonList" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ListBoxItem}" >
                        <Setter Property="Margin" Value="3" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                    <Border BorderThickness="0" Background="Transparent">
                                        <RadioButton 
                                            Focusable="False"
                                            IsHitTestVisible="False"
                                            IsChecked="{TemplateBinding IsSelected}">
                                            <ContentPresenter />
                                        </RadioButton>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border BorderThickness="0" Padding="0" BorderBrush="Transparent" Background="Transparent" Name="Bd" SnapsToDevicePixels="True">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--ESte DataTemplate junto con el ItemPanelTemplate es para que puedan haber dos columnas o mas en un combobox personalizado-->
        <DataTemplate x:Key="advancedComboxItemDataTemplate">
            <Grid Width="Auto">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="A"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <!--DisplayMemberPath="numerotelefono"-->
                <TextBlock Text="{Binding numerotelefono}" Margin="5" Grid.Column="0" TextAlignment="Left"/>
                <TextBlock Text="{Binding descripciontelefono}" Margin="5" Grid.Column="1" TextAlignment="Left">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ComboBoxItem}, Path=IsSelected}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
        </DataTemplate>
        <ItemsPanelTemplate x:Key="advancedComboxItemsPanelTemplate">
            <StackPanel Grid.IsSharedSizeScope="True" IsItemsHost="True"/>
        </ItemsPanelTemplate>

        <!--Este conversor es para poder activar o desactivar botones usando el multiDataTrigger-->
        <local:NotNullToBoolConverter x:Key="NotNullToBoolConverter"/>

        <!--Este sirve para darle formato a botones personalizados con imagenes-->
        <Style
            x:Key="BotonEstilo"
            TargetType="{x:Type Button}">
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
        </Style>
        <Style
            x:Key="StackPanelEstilo"
            TargetType="StackPanel">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Margin" Value="2,0" />
        </Style>
    </Control.Resources>
    <Grid>
        <Border BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="2" 
					CornerRadius="0,0,0,0" Margin="1">
            <Border.BitmapEffect>
                <DropShadowBitmapEffect Color="AliceBlue" Opacity="0.5" Direction="270" ShadowDepth="0.7" />
            </Border.BitmapEffect>
            <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="25"/>
                        <RowDefinition Height="280"/>
                        <RowDefinition Height="55"/>
                        <RowDefinition Height="65"/>
                        <RowDefinition Height="45" />
                    </Grid.RowDefinitions>

                    <TextBox Name="txtBandera" Text="{Binding txtBandera, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="Hidden"/>
                    <!--<TextBlock Grid.Row="0" x:Name="MessageTextBlock" Text="{Binding Message, Mode=TwoWay}" TextWrapping="Wrap" Margin="5" HorizontalAlignment="Right" FontSize="20" />-->
                    <!--<UniformGrid Grid.Column="0" Grid.Row="0" Margin="2" Columns="2" HorizontalAlignment="Stretch"
								 VerticalAlignment="Center">
                        -->
                    <!--<TextBox Name="txtBandera" Text="{Binding txtBandera, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="Hidden"/>
                        <TextBlock Grid.Row="0" x:Name="MessageTextBlock" Text="{Binding Message, Mode=TwoWay}" TextWrapping="Wrap" Margin="5" HorizontalAlignment="Right" FontSize="20" />-->

                    <!--<Label Content="* Firma Auditora" FontSize="14" HorizontalAlignment="Right" Margin="1" />
                        <ComboBox  Height="25" 
                                   ItemsSource="{Binding ListadoFirmas}" 
                                   DisplayMemberPath="razonsocialfirma" 
                                   SelectedValuePath="idfirma"
                                   SelectedItem="{Binding SelectedTipoFirma, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                   Margin="1" IsReadOnly="False" IsEnabled="{Binding HabilitarTipoFirma}"/>-->
                    <!--
                    </UniformGrid>-->

                    <UniformGrid Grid.Column="0" Grid.Row="1" Columns="6" HorizontalAlignment="Center" Width="890"
								 VerticalAlignment="Stretch" >

                        <Label Content="* DUI:" FontSize="14" HorizontalAlignment="Left"/>
                        <TextBox x:Name="Idduipersonax" IsEnabled="{Binding HabilitarDUI}" Height="25">
                            <Binding Path="Idduipersonay" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                <Binding.ValidationRules>
                                    <local:TextBoxNoVacioValidationRule x:Name="DuiValidation"  ValidatesOnTargetUpdated="True" Message="DUI Requerido"/>
                                    <local:ValidacionDUI x:Name="DuiValidation22"  ValidatesOnTargetUpdated="True" Message="Ingrese un numero valido con formato 01234567-1"/>
                                </Binding.ValidationRules>
                            </Binding>
                            <!--<i:Interaction.Triggers>
                                <i:EventTrigger EventName="TextChanged">
                                    <i:InvokeCommandAction Command="{Binding DUIChanged}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>-->
                        </TextBox>
                        <!--<TextBox  x:Name="Idduipersonax" Text="{Binding Idduipersonay, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True}" IsEnabled="{Binding HabilitarDUI}" Width="150" Height="25" />-->


                        <Label Content="* Nombres:" FontSize="14" HorizontalAlignment="Left"/>
                        <TextBox x:Name="txtNombrex" IsEnabled="{Binding HabilitartxtNombrex}" Height="25">
                            <Binding Path="Nombrespersona" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                <Binding.ValidationRules>
                                    <local:TextBoxNoVacioValidationRule x:Name="PrimerNombreValidation"  ValidatesOnTargetUpdated="True" Message="Nombre Requerido"/>
                                    <local:ExcluirChar x:Name="PrimerNombreValidation2"  ValidatesOnTargetUpdated="True" Message="El nombre contiene caracteres no permitidos."/>
                                    <local:ValidacionMenorQue NumeritoMenorIgualQue="30" NumeritoMayorIgualQue="3" EsRequerido="True"  x:Name="PrimerNombrevalidation4" ValidatesOnTargetUpdated="True" Message="La longitud maxima del nombre es 30"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox>
                        <!--<TextBox x:Name="txtNombrex" Text="{Binding Nombrespersona, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" />-->

                        <Label Content="* Apellidos" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtApellidos" Text="{Binding Apellidospersona, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtApellidos"  IsEnabled="{Binding HabilitartxtApellidos}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Apellidospersona" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:TextBoxNoVacioValidationRule x:Name="ApellidosValidation"  ValidatesOnTargetUpdated="True" Message="Apellidos Requeridos"/>
                                        <local:ExcluirChar x:Name="ApellidoValidation2"  ValidatesOnTargetUpdated="True" Message="Los apellidos contienen caracteres no permitidos."/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="30" NumeritoMayorIgualQue="3" EsRequerido="True"  x:Name="Apellidosvalidation4" ValidatesOnTargetUpdated="True" Message="La longitud maxima de los apellidos es 30"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>



                        <Label Content="* Nick Usuario:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtNickUsuario" Text="{Binding Nickusuariousuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtNickUsuario"  IsEnabled="{Binding HabilitartxtNickUsuario}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Nickusuariousuario" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:TextBoxNoVacioValidationRule x:Name="NickValidation"  ValidatesOnTargetUpdated="True" Message="Dato requerido"/>
                                        <local:ExcluirChar x:Name="Nickvalidation2"  NoPermitir="/;[]{}()*-+~^_=!@$%\'&lt;&gt;&amp;" ValidatesOnTargetUpdated="True" Message="El Nick contiene caracteres no permitidos."/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="12" NumeritoMayorIgualQue="3" EsRequerido="True"  x:Name="Nickvalidation4" ValidatesOnTargetUpdated="True" Message="Ingrese un NICK de longitud mayor que 3 y menor o igual que 12"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <Label Content="* Contraseña:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtContraseña" Text="{Binding Contraseniausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" />-->
                        <!--<PasswordBox x:Name="UserPassword" 
					 Grid.Row="2"
					 Grid.Column="1"
					 Margin="4" />-->


                        <PasswordBox Name="txtContraseña"  IsEnabled="{Binding HabilitartxtContraseña}" Grid.Column="1" Height="25" PasswordChanged="CambioContraPrueba" LostFocus="PerdioFocoContraseña" />
                        <!--<PasswordBox Name="txtContraseña">
                            <PasswordBox.Style>
                                <Style TargetType="{x:Type PasswordBox}">
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsFocused,RelativeSource={RelativeSource Self}}" Value="False" />
                                                <Condition Binding="{Binding IsError}" Value="True" />
                                                <Condition Binding="{Binding CambioContraPrueba}" Value="true"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="BorderBrush" Value="Red" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </PasswordBox.Style>
                        </PasswordBox>-->


                        <!--<TextBox Name="txtContraseña"  Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Contraseniausuario" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:TextBoxNoVacioValidationRule x:Name="ContraseniausuarioValidation"  ValidatesOnTargetUpdated="True"/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="10" NumeritoMayorIgualQue="6" EsRequerido="True"  x:Name="Contraseniausuariovalidation4" ValidatesOnTargetUpdated="True" Message="Ingrese una contraseña de longitud mayor que 6 y menor que 10"/>
                                        -->
                        <!--<local:ExcludeChar x:Name="Contraseniausuariovalidation2"  ValidatesOnTargetUpdated="True" Message="Los apellidos contienen caracteres no permitidos."/>-->
                        <!--
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>-->

                        <Label Content="* Repita contraseña:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtRepetirContraseña" Text="{Binding Repetircontraseniausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="150" Height="25" />-->
                        <!--<TextBox x:Name="txtContraseña" Text="{Binding Contraseniausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" />-->
                        <PasswordBox x:Name="txtRepitaContraseña" IsEnabled="{Binding HabilitartxtRepitaContraseña}"  PasswordChanged="RepitaContaseniaChanged" LostFocus="PerdioFocoRepitaContrasenia" Height="25"/>
                        <!--<TextBox Name="txtRepitaContraseña"  Grid.Column="1" Height="25">
                            <TextBox.Text>
                                -->
                        <!--<Binding Path="Text" ElementName="txtContraseña"  Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >-->
                        <!--
                                <Binding  Path="Repetircontraseniausuario" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:TextBoxNoVacioValidationRule x:Name="RepitaContraseniausuarioValidation"  ValidatesOnTargetUpdated="True" Message="Requerido"/>
                                        -->
                        <!--<local:ValidacionMenorQue NumeritoMenorIgualQue="10" NumeritoMayorIgualQue="6" EsRequerido="True"  x:Name="RepitaContraseniausuariovalidation4" ValidatesOnTargetUpdated="True" Message="Ingrese una contraseña de longitud mayor que 6 y menor que 10"/>-->
                        <!--<local:ExcludeChar x:Name="Contraseniausuariovalidation2"  ValidatesOnTargetUpdated="True" Message="Los apellidos contienen caracteres no permitidos."/>-->
                        <!--
                                        <local:ValidacionCompareDos Message="Verifique que las contraseñas sean iguales">
                                            <local:ValidacionCompareDos.ContenedorContraseña>
                                                -->
                        <!--888888<local:ContComparaContrasenia DataContext="{Binding 
                                                                                                Source={StaticResource DataContextBridge}, 
                                                                                                Path=DataContext}"
                                                                                                Valux="{Binding Contraseniausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                                                CajaClaves="{Binding Text, ElementName=txtContraseña }"8888888/>-->
                        <!--
                                                <local:ContComparaContrasenia DataContext="{Binding 
                                                                                                Source={StaticResource DataContextBridge}, 
                                                                                                Path=DataContext}"
                                                                                                Valux="{Binding Path=Password, ElementName=txtcontraseña.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                                                Valux2="{Binding Path=Password, ElementName=txtcontraseña.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                            </local:ValidacionCompareDos.ContenedorContraseña>
                                        </local:ValidacionCompareDos>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>-->
                        <Label Content="Iniciales para firmar:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtIniciales"  Text="{Binding Inicialesusuario , Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtIniciales" IsEnabled="{Binding HabilitartxtIniciales}" Grid.Column="1" Height="25" IsReadOnly="True" >
                            <TextBox.Text>
                                <Binding Path="Inicialesusuario" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:TextBoxNoVacioValidationRule x:Name="InicialesValidation"  ValidatesOnTargetUpdated="True" Message="Dato Requerido"/>
                                        <!--<local:ExcluirChar x:Name="InicialesValidation2"  ValidatesOnTargetUpdated="True" Message="Los iniciales contienen caracteres no permitidos."/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="6" NumeritoMayorIgualQue="2" EsRequerido="True"  x:Name="Inicialesvalidation4" ValidatesOnTargetUpdated="True" Message="La longitud minima es 2 y maxima es 6 para las iniciales de firma"/>-->
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Content="  Pregunta secreta:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtPista" Text="{Binding Idpista, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Width="150" Height="25" IsReadOnly="True"/>-->
                        <ComboBox  x:Name="cmbPista"  IsEnabled="{Binding HabilitarcmbPista}" Text="--Seleccione una pista--" IsEditable="True" IsReadOnly="True" 
                                   ItemsSource="{Binding ListadoPistas}" 
                                   DisplayMemberPath="descripcionpista" 
                                   SelectedValue="idpista"
                                   SelectedItem="{Binding SelectedPistas, Mode=Default, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}"
                                   Height="25"/>
                        <!--SelectedValue="idpista"-->

                        <Label Content=" Respuesta secreta:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtRespuestaPista" Text="{Binding Respuestapistausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtRespuestaPista"  IsEnabled="{Binding HabilitartxtRespuestaPista}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Respuestapistausuario" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <!--<local:TextBoxNoVacioValidationRule x:Name="RespuestapistausuarioValidation"  ValidatesOnTargetUpdated="True"/>-->
                                        <local:ExcluirChar x:Name="Respuestapistausuariovalidation2" NoPermitir="/;[]{}()*-+~^_=!@$%\'&lt;&gt;&amp;" ValidatesOnTargetUpdated="True" Message="La respuesta secreta contienen caracteres no permitidos."/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="32" NumeritoMayorIgualQue="3" EsRequerido="False"  x:Name="RespuestaPistaUsuariovalidation4" ValidatesOnTargetUpdated="True" Message="La longitud maxima de la respuesta es 32 y minima 3. Sugerencia: No utice frases compuestas dificiles de recordar"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>


                        <Label Content="Fecha emision CVPA" FontSize="14" HorizontalAlignment="Left"/>
                        <DatePicker x:Name="dpickFechaCVPA" IsEnabled="{Binding HabilitardpickFechaCVPA}"
                                    DisplayDate="{Binding DateTime.Now()}" 
                                    Focusable="False" 
                                    SelectedDate="{Binding Fechacvpausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    Height="25"/>

                        <Label Content="* Sexo:" FontSize="14" HorizontalAlignment="Left"/>
                        <ComboBox  x:Name="cmbSexo"  IsEnabled="{Binding HabilitarcmbSexo}" Text="--Seleccione sexo--" IsEditable="True" IsReadOnly="True" 
                                   SelectedItem="{Binding Sexopersona, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                   ItemsSource="{Binding QueSexo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                   Height="25" >

                        </ComboBox>
                        <!--<ComboBoxItem  Name="esHombre" Tag="Hombre">Masculino</ComboBoxItem>
                        <ComboBoxItem  Name="esMujer" Tag="Mujer">Femenino</ComboBoxItem>-->
                        <!--SelectedValuePath="{Binding Sexopersona, Mode=TwoWay}"-->
                        <!--Text="{Binding SelectedChangedx.TheUsuariosPersonas.sexopersona,
                                    UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"-->
                        <Label Content="Numero C.V.P.A:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtCVPA" Text="{Binding Numerocvpausuario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtCVPA"  IsEnabled="{Binding HabilitartxtCVPA}" Grid.Column="1" Height="25" >
                            <TextBox.Text>
                                <Binding Path="Numerocvpausuario" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <!--<local:TextBoxNoVacioValidationRule x:Name="RespuestapistausuarioValidation"  ValidatesOnTargetUpdated="True"/>-->
                                        <local:ValidacionSoloDigitos x:Name="Numerocvpausuariovalidation3"  ValidatesOnTargetUpdated="True" Message="Inserte un numero CVPA valido de 4 digitos [9999]."/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="4" NumeritoMayorIgualQue="1" EsRequerido="False"  x:Name="Numerocvpausuariovalidation4" ValidatesOnTargetUpdated="True" Message="Ingrese un numero mayor que 0 y de hasta 9999"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <Label Content="Direccion:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtDireccion" Text="{Binding Direccionpersona, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False" />-->
                        <TextBox Name="txtDireccion"  IsEnabled="{Binding HabilitartxtDireccion}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Direccionpersona" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <!--<local:ValidacionSoloDigitos x:Name="Noafppersonavalidation3"  ValidatesOnTargetUpdated="True" Message="Inserte un numero AFP valido de 12 digitos [999999999999]."/>-->
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="50" EsRequerido="False"  x:Name="Direccionpersonavalidation4" ValidatesOnTargetUpdated="True" Message="La longitud de la direccion es incorrecta. maximo 50 Caracteres"/>
                                        <local:ExcluirChar  NoPermitir="/;[]{}()*-+~^_=!@$%\'&lt;&gt;&amp;" x:Name="DireccionpersonaValidacion1" ValidatesOnTargetUpdated="True" Message="La direccion contiene caracteres no permitidos"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Content="  No. AFP:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtAFP" Text="{Binding Noafppersona, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtAFP"  IsEnabled="{Binding HabilitartxtAFP}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Noafppersona" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:ValidacionSoloDigitos x:Name="Noafppersonavalidation3"  ValidatesOnTargetUpdated="True" Message="Inserte un numero AFP valido de 12 digitos [999999999999]."/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="12" NumeritoMayorIgualQue="11" EsRequerido="False"  x:Name="Noafppersonavalidation4" ValidatesOnTargetUpdated="True" Message="La longitud del numero AFP es incorrecta. maximo 12 Digitos"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Content="No. ISSS:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtnoissspersona" Text="{Binding Noissspersona, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtnoissspersona" IsEnabled="{Binding Habilitartxtnoissspersona}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Noissspersona" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:ValidacionISSS x:Name="NoissspersonaValidation3" ValidatesOnTargetUpdated="True" Message="Digite un No. ISSS valido con separadores. Ej: 999-99-9999"/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="11" NumeritoMayorQue="10" EsRequerido="False"  x:Name="Noissspersonavalidation4" ValidatesOnTargetUpdated="True" Message="La longitud del NIT es incorrecta. Longitud maxima 11 incluyendo separadores"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Content="No. NIT:" FontSize="14" HorizontalAlignment="Left"/>
                        <!--<TextBox x:Name="txtNIT" Text="{Binding Nitpersona, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True,NotifyOnValidationError=True}" Width="150" Height="25" IsReadOnly="False"/>-->
                        <TextBox Name="txtNIT" IsEnabled="{Binding HabilitartxtNIT}" Grid.Column="1" Height="25">
                            <TextBox.Text>
                                <Binding Path="Nitpersona" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                    <Binding.ValidationRules>
                                        <local:ValidacionNIT x:Name="NitpersonaValidation3" ValidatesOnTargetUpdated="True" Message="Digite un NIT valido con separadores. Ej: 0123-012345-012-1"/>
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="17" NumeritoMayorQue="16" EsRequerido="False"  x:Name="Nitpersonavalidation4" ValidatesOnTargetUpdated="True" Message="La longitud del NIT es incorrecta. maximo 17 incluyendo separadores"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Content="* Rol de usuario:" FontSize="14" HorizontalAlignment="Left"/>
                        <ComboBox  x:Name="cmbRoles" IsEnabled="{Binding HabilitarcmbRoles}" Text="--Seleccione un rol--" IsEditable="True" IsReadOnly="True" 
                                   ItemsSource="{Binding ListadoRoles, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                                   DisplayMemberPath="nombrerol" 
                                   SelectedItem="{Binding SelectedRol, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                   Height="25"/>
                        <!--SelectedValuePath="idrol"-->
                        <Label Content="Jefe Inmediato:" FontSize="14" HorizontalAlignment="Left"/>
                        <ComboBox  x:Name="cmbJefes" IsEnabled="{Binding HabilitarcmbJefes}" Text="--Seleccione un jefe--" IsEditable="True" IsReadOnly="True"  
                                   ItemsSource="{Binding ListadoPersonas, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                   DisplayMemberPath="nombrespersona" 
                                   SelectedItem="{Binding SelectedJefeSuperior, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    Height="25"/>

                        <Label Content="Fecha contratacion: " FontSize="14" HorizontalAlignment="Left"/>
                        <DatePicker x:Name="dpickFechaContratacion" IsEnabled="{Binding HabilitardpickFechaCVPA}"
                                    DisplayDate="{Binding DateTime.Now.AddYears(1).ToShortDateString()}" 
                                    Focusable="False" 
                                    SelectedDate="{Binding Fechacontratacion, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    Height="25"/>

                        <!--<PasswordBox x:Name="UserPassword" 
					 Grid.Row="2"
					 Grid.Column="1"
					 Margin="4" />

                        <TextBlock Grid.Row="0"
				   Grid.ColumnSpan="2"
				   Margin="4"
				   Text="{Binding PasswordInVM}" />-->

                        <!--SelectedValuePath="idduipersona"-->
                    </UniformGrid>
                    <Border Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="6"  BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="1,1,1,1" Background="Transparent" />
                    <Border Grid.Column="0" Grid.Row="3" Grid.ColumnSpan="6"  BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="1,1,1,1" Background="Transparent" />
                    <StackPanel Orientation="Horizontal" IsEnabled="{Binding HabilitarGridTelefonos}" Margin="0,3" x:Name="GridTelefonos" Grid.Column="0" Grid.Row="2"   HorizontalAlignment="Stretch">
                        <!--<Border BorderThickness="1" BorderBrush="{DynamicResource AccentColorBrush}">-->
                        <Label Content="Teléfono" FontSize="14" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="3,0,0,0" />
                        <TextBox x:Name="txtTelef" Width="115" Height="35" FontSize="16" Margin="5,0,0,0" >
                            <Binding Path="TelefonoT" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" >
                                <Binding.ValidationRules>
                                    <!--<local:ValidacionNIT x:Name="NitpersonaValidation3" ValidatesOnTargetUpdated="True" Message="Digite un NIT valido con separadores. Ej: 0123-012345-012-1"/>-->
                                    <local:ValidacionMenorQue NumeritoMenorIgualQue="9" NumeritoMayorIgualQue="8" EsRequerido="False"  x:Name="Telefonovalidation4" ValidatesOnTargetUpdated="True" Message="La longitud del telefono permitida son 9 digitos incluyendo separador."/>
                                    <local:ValidacionTelefono x:Name="Telefonovalidation2" ValidatesOnTargetUpdated="True" Message="Ingrese un telefono con formato [7777-9999]. los telefonos solo pueden comenzar con 2,7,8 y 9"/>
                                    <local:TextBoxNoVacioValidationRule x:Name="TelefonoValidacion1" ValidatesOnTargetUpdated="True" Message="Dato requerido" />
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox>
                        <Label Content="Tipo teléfono" FontSize="14" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10,0,5,0" />
                        <ComboBox  Width="150" Height="40"  Margin="0,0,3,0" x:Name="cmbTipoTelefonos"
                                                       ItemsSource="{Binding ListadoTipoTelefono, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                       DisplayMemberPath="descripciontt" 
                                                       SelectedValuePath="idtt" 
                                                       SelectedItem="{Binding SelectedTipoTelefono, Mode=TwoWay}" IsReadOnly="False" />
                        <Button  Height="40" Width="130" Margin="10,0,5,0"
                                    	x:Name="cmdAgreTelef" 
                                    	Command="{Binding cmdAgreTelef_Click}" 
                                    	FontSize="15" 
                                    	ToolTip="Agregar telefono" Opacity="0.9"   HorizontalAlignment="Left" >
                            <StackPanel Orientation="Horizontal" Width="120">
                                <StackPanel Style="{StaticResource StackPanelEstilo}" >
                                    <Rectangle 
                                                        Width="40"
                                                        Height="30"
                                                        Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_thumb_up_add}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                    <Canvas>
                                        <!--<Line X1="9" Y1="-4" X2="40" Y2="-22" Stroke="Black" StrokeThickness="4" />-->
                                    </Canvas>
                                    <!--<TextBlock Margin="1" Width="45"  TextAlignment="Center" VerticalAlignment="Bottom"  HorizontalAlignment="Stretch"  Text="Quitar" />-->
                                </StackPanel>
                            <TextBlock Margin="1" Width="55"  TextAlignment="Center" VerticalAlignment="Center" FontSize="15" HorizontalAlignment="Stretch"  Text="Agregar" />
                        </StackPanel>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding (Validation.HasError), ElementName=txtTelef}" Value="false" />
                                                <Condition Binding="{Binding ElementName=cmbTipoTelefonos, Path=SelectedItem, Converter={StaticResource NotNullToBoolConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <ComboBox Height="40" Width="150" x:Name="cmbTelefonos" ItemsSource="{Binding ListadoTelefonos, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                      SelectedItem="{Binding SelectedTelefonoAgregado, Mode=TwoWay}"
                                                      Margin="5,0,5,0" 
                                                      ItemTemplate="{StaticResource advancedComboxItemDataTemplate}"
                                                      ItemsPanel="{StaticResource advancedComboxItemsPanelTemplate}"/>

                        <!--<control:MvvmBotonEliminarTelefono HorizontalAlignment="Center" Margin="30,0,0,0"/>-->
                        <Button Height="40" Width="130"
                                        Command="{Binding cmdQuitTelefono_Click}" Margin="0,0,15,0"   >
                            <StackPanel Orientation="Horizontal" Width="120">
                                <StackPanel Style="{StaticResource StackPanelEstilo}" >
                                    <Rectangle 
                                                        Width="55"
                                                        Height="30"
                                                        Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_phone}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                    <Canvas>
                                        <Line X1="9" Y1="-4" X2="40" Y2="-22" Stroke="Black" StrokeThickness="4" />
                                    </Canvas>
                                    <!--<TextBlock Margin="1" Width="45"  TextAlignment="Center" VerticalAlignment="Bottom"  HorizontalAlignment="Stretch"  Text="Quitar" />-->
                                </StackPanel>
                                <TextBlock Margin="1" Width="55"  TextAlignment="Center" VerticalAlignment="Center" FontSize="15" HorizontalAlignment="Stretch"  Text="Eliminar" />
                            </StackPanel>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=cmbTelefonos, Path=SelectedItem, Converter={StaticResource NotNullToBoolConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                    </StackPanel>
 
                    <UniformGrid x:Name="GridCorreos" IsEnabled="{Binding HabilitarGridCorreos}" Grid.Column="0" Grid.Row="3" Margin="1" Columns="6" HorizontalAlignment="Stretch"  >
                        <Label Content="Correos" FontSize="14" HorizontalAlignment="Right" Margin="0,10,68.333,12"/>
                        <!--<TextBox Height="25" x:Name="txtCorreo" Text="{Binding CorreoT, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FontSize="16" Margin="0,4,-39,3.667" />-->
                        <TextBox Name="txtCorreo"  Grid.Column="1" Height="30" FontSize="16" Margin="-67.333,11,-7.333,13">
                            <TextBox.Text>
                                <Binding Path="CorreoT" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged"  >
                                    <Binding.ValidationRules>
                                        <!--<local:ValidacionNIT x:Name="NitpersonaValidation3" ValidatesOnTargetUpdated="True" Message="Digite un NIT valido con separadores. Ej: 0123-012345-012-1"/>-->
                                        <local:ValidacionMenorQue NumeritoMenorIgualQue="60" NumeritoMayorQue="7" EsRequerido="False"  x:Name="Correovalidation4" ValidatesOnTargetUpdated="True" Message="La longitud del correo electronico es incorrecta. maximo 60 minimo 7"/>
                                        <local:ValidacionEmail x:Name="Correovalidation3" ValidatesOnTargetUpdated="True" Message="El correo electronico no es valido. Formato basico es [Aa-Zz@Aa-Zz.dominio]"/>
                                        <local:TextBoxNoVacioValidationRule x:Name="correovalidation2" ValidatesOnTargetUpdated="True" Message="Dato requerido" />
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <CheckBox Content="Es Principal" IsChecked="{Binding CorreoPrincipalChek}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="25.333,18,33,12" Height="24"/>
                        <!--<Button Height="30" x:Name="cmdAgreCorreos" Content="Agregar" Margin="63.667,1,-59.667,1" FontSize="15" Command="{Binding cmdAgreCorreos_Click}" />-->
                        <!--<Button  Height="40" Width="130" Margin="5,0,5,0"
                                    	x:Name="cmdAgreCorreos" 
                                    	Command="{Binding cmdAgreTelef_Click}" 
                                    	FontSize="15" 
                                    	ToolTip="Agregar correo electronico" Opacity="0.9"   HorizontalAlignment="Left" >
                            <StackPanel Orientation="Horizontal" Width="120">
                                <StackPanel Style="{StaticResource StackPanelEstilo}" >
                                    <Rectangle 
                                                        Width="40"
                                                        Height="30"
                                                        Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_thumb_up_add}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                    <Canvas>
                                        --><!--<Line X1="9" Y1="-4" X2="40" Y2="-22" Stroke="Black" StrokeThickness="4" />--><!--
                                    </Canvas>
                                    --><!--<TextBlock Margin="1" Width="45"  TextAlignment="Center" VerticalAlignment="Bottom"  HorizontalAlignment="Stretch"  Text="Quitar" />--><!--
                                </StackPanel>
                                <TextBlock Margin="1" Width="55"  TextAlignment="Center" VerticalAlignment="Center" FontSize="15" HorizontalAlignment="Stretch"  Text="Agregar" />
                            </StackPanel>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding (Validation.HasError), ElementName=txtTelef}" Value="false" />
                                                <Condition Binding="{Binding ElementName=cmbTipoTelefonos, Path=SelectedItem, Converter={StaticResource NotNullToBoolConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>-->
                        <Button  Height="40" Width="120"
                                 x:Name="cmdAgreCorreos" 
                                 Command="{Binding cmdAgreCorreos_Click}" 
                                 Margin="-22,8,40,15" 
                                 ToolTip="Agregar correo electronico" 
                                 Opacity="0.9" >
                            <StackPanel Orientation="Horizontal" Width="120">
                                <StackPanel Style="{StaticResource StackPanelEstilo}" >
                                    <Rectangle 
                                                        Width="30"
                                                        Height="27"
                                                        Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_thumb_up_add}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                    <Canvas>
                                        <!--<Line X1="9" Y1="-4" X2="40" Y2="-22" Stroke="Black" StrokeThickness="4" />-->
                                    </Canvas>
                                    <!--<TextBlock Margin="1" Width="45"  TextAlignment="Center" VerticalAlignment="Bottom"  HorizontalAlignment="Stretch"  Text="Quitar" />-->
                                </StackPanel>
                                <TextBlock Margin="1" Width="75"  TextAlignment="Center" VerticalAlignment="Center" FontSize="15" HorizontalAlignment="Stretch"  Text="Agregar" />
                            </StackPanel>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=txtCorreo, Path=(Validation.HasError)}" Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>



                        <!--<ComboBox Width="120" ItemsSource="{Binding SelectedChangedx.TheUsuariosPersonas.correos}" DisplayMemberPath="direccioncorreo"/>-->
                        <ListBox x:Name="lstCorreos" Height="65" Width="180" 
                    		ItemsSource="{Binding ListadoCorreos, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    		DisplayMemberPath="direccioncorreo" 
                    		SelectedItem="{Binding SelectedCorreoAgregado, Mode=TwoWay}" Margin="-54.333,2,-10.333,2"/>
                        <Button x:Name="cmdQuitCorreos" Grid.Column="8" Grid.Row="1" HorizontalAlignment="Center" Height="40"  
                                            
                                            Command="{Binding cmdQuitCorreos_Click}" 
                                            ToolTip="Elimina un correo del listado" Margin="0,0,2,0" >
                            <StackPanel Orientation="Horizontal" Width="120">
                                <StackPanel Style="{StaticResource StackPanelEstilo}" >
                                    <Rectangle 
                                                        Width="40"
                                                        Height="20"
                                                        Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_email_minimal}" />
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                    <Canvas>
                                        <!--<Line X1="9" Y1="-4" X2="40" Y2="-22" Stroke="Black" StrokeThickness="4" />-->
                                    </Canvas>
                                    <!--<TextBlock Margin="1" Width="45"  TextAlignment="Center" VerticalAlignment="Bottom"  HorizontalAlignment="Stretch"  Text="Quitar" />-->
                                </StackPanel>
                                <TextBlock Margin="1" Width="55"  TextAlignment="Center" VerticalAlignment="Center" FontSize="15" HorizontalAlignment="Stretch"  Text="Eliminar" />
                            </StackPanel>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=lstCorreos, Path=SelectedItem, Converter={StaticResource NotNullToBoolConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <!--<Button 
                                Width="45" Height="30" x:Name="cmdQuitCorreos" 
                                Content="x" 
                                Style="{StaticResource AccentedSquareButtonStyle}"
                                Margin="85,8,8.667,13" FontSize="16" Command="{Binding cmdQuitCorreos_Click}" ToolTip="Eliminar un correo de la lista"/>-->
                        <!--<Button Content="Quitar"  x:Name="cmdQuitCorreos"     Height="40"  Visibility="{Binding btnQuitCorreosVisible}" Command="{Binding cmdQuitCorreos_Click}" ToolTip="Elimina un correo del listado" Margin="17.333,7,4,7"  Width="120" Template="{DynamicResource btnEliminarCorreo}" BorderBrush="{DynamicResource AccentColorBrush}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=lstCorreos, Path=SelectedItem, Converter={StaticResource NotNullToBoolConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>-->
                    </UniformGrid>
                    
                <UniformGrid Grid.Column="2" Grid.Row="4" Margin="1" Columns="2" HorizontalAlignment="Center"
								 VerticalAlignment="Stretch">
                        <Button Grid.Column="4" x:Name="cmdGuardar" Width="150" Margin="15,1,5,1" FontSize="16"
                                Command="{Binding cmdGuardar_Click}" 
                                CommandParameter="{Binding ElementName=txtContraseña}" 
                                Content="Guardar"                          
                                ToolTip="Guarda el nuevo usuario en la base de datos" 
                                 >
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AccentedSquareButtonStyleSGPtWpf}">
                                    <Setter Property="IsEnabled" Value="false" />
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ElementName=Idduipersonax, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtNombrex, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtApellidos, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtIniciales, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtNickUsuario, Path=(Validation.HasError)}" Value="false" />

                                                <!--<Condition Binding="{Binding ElementName=txtContraseña, Path=(Validation.HasError)}" Value="false" />-->
                                                <Condition Binding="{Binding ElementName=txtBandera, Path=Text}" Value="1" />
                                                <!--<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=IsEnabled}" Value="True"/>-->
                                                <!--<Condition Binding="{Binding ElementName=txtContraseña, Path=Background }" Value="Colors.White" />-->

                                                <Condition Binding="{Binding ElementName=txtRespuestaPista, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtCVPA, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtDireccion, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtAFP, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtnoissspersona, Path=(Validation.HasError)}" Value="false" />
                                                <Condition Binding="{Binding ElementName=txtNIT, Path=(Validation.HasError)}" Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsEnabled" Value="true" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <Button Grid.Column="5" x:Name="cmdCancelar" FontSize="16"
                            Style="{StaticResource AccentedSquareButtonStyleSGPtWpf}"
                            Command="{Binding cmdCancelar_Click}" 
                            Content="Cancelar"
                                                             
                            Width="150" Margin="15,1,5,1">
                        </Button>
                    </UniformGrid>
                </Grid>
            </Border>

    </Grid>
</Controls:MetroWindow>
