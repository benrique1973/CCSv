<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">
    <Style x:Key = "AdvertenciaStyle" TargetType = "TextBlock" >
        <Setter Property = "Foreground" Value = "Red"  />
        <Style.Triggers>
            <Trigger Property = "IsMouseOver" Value = "True">
                <Setter Property = "Foreground" Value = "Green" />
            </Trigger>
        </Style.Triggers>

    </Style>
<!--Mahass estilos-->
    <ExponentialEase x:Key="ExpoEaseIn"
                     EasingMode="EaseIn"
                     Exponent="2" />
    <ExponentialEase x:Key="ExpoEaseOut"
                     EasingMode="EaseOut"
                     Exponent="2" />
    <ExponentialEase x:Key="ExpoEaseInOut"
                     EasingMode="EaseInOut"
                     Exponent="2" />

    <DropShadowEffect x:Key="WaitingForDataEffect"
                      Opacity="0"
                      BlurRadius="10"
                      ShadowDepth="0"
                      Color="{DynamicResource BlackColor}" />

    <Storyboard x:Key="WaitingForDataStoryboard" po:Freeze="True">
        <DoubleAnimation AutoReverse="True"
                         Duration="00:00:02"
                         From="0"
                         RepeatBehavior="Forever"
                         Storyboard.TargetName="PART_WaitingForDataEffectGrid"
                         Storyboard.TargetProperty="(Effect).Opacity"
                         Timeline.DesiredFrameRate="30"
                         To="1" />
    </Storyboard>

    <Storyboard x:Key="HideFloatingMessageStoryboard">
        <DoubleAnimation Duration="0:0:.2"
                         From="15"
                         EasingFunction="{StaticResource ExpoEaseInOut}"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="MaxHeight"
                         To="0" />
        <DoubleAnimation Duration="0:0:.2"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="Opacity"
                         To="0" />
        <DoubleAnimation Duration="0:0:.2"
                         EasingFunction="{StaticResource ExpoEaseIn}"
                         Storyboard.TargetName="PART_FloatingMessage"
                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                         To="20" />
    </Storyboard>

    <Storyboard x:Key="ShowFloatingMessageStoryboard">
        <DoubleAnimation Duration="0:0:.2"
                         From="0"
                         EasingFunction="{StaticResource ExpoEaseInOut}"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="MaxHeight"
                         To="15" />
        <DoubleAnimation Duration="0:0:.2"
                         Storyboard.TargetName="PART_FloatingMessageContainer"
                         Storyboard.TargetProperty="Opacity" />
        <DoubleAnimation Duration="0:0:.2"
                         EasingFunction="{StaticResource ExpoEaseOut}"
                         Storyboard.TargetName="PART_FloatingMessage"
                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                         To="0" />
    </Storyboard>
    
    <Style x:Key="errorDataGrid" TargetType="{x:Type TextBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,2,40,2" />
        <Setter Property="Validation.ErrorTemplate"  >
            <Setter.Value>
                <ControlTemplate >
                    <!--https://codeblitz.wordpress.com/2009/05/08/wpf-validation-made-easy-with-idataerrorinfo/-->
                    <DockPanel LastChildFill="true" >
                        <Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                            ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
                            </TextBlock>
                        </Border>
                        <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
                            <Border BorderBrush="Red" BorderThickness="3" />
                        </AdornedElementPlaceholder>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="TextBlockStyleSGPt" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                 Value="{Binding RelativeSource={RelativeSource Self},
                 Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- TextBox style which displays validation errors as a tooltip -->
    <Style TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="Background" Value="Red"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- style to apply to DataGridTextColumn in edit mode  -->
    <Style x:Key="CellEditStyle" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                       Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="Background" Value="Red"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- A Row Style which renders a different validation error indicator -->
    <Style x:Key="RowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Ellipse Width="12" Height="12" Fill="Red" Stroke="Black" StrokeThickness="0.5"/>
                        <TextBlock FontWeight="Bold" Padding="4,0,0,0" Margin="0" VerticalAlignment="Top" Foreground="White" Text="!"
                                  ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}},
                                  Path=(Validation.Errors)[0].ErrorContent}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RowStyleSGPt" TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource AzureDataGrid}">
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Ellipse Width="12" Height="12" Fill="Red" Stroke="Black" StrokeThickness="0.5"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--http://stackoverflow.com/questions/6354694/wpf-datagridtextcolumn-multi-line-input-->
    </Style>
</ResourceDictionary>